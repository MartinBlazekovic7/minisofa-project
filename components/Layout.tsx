import React, {createContext, useState} from 'react';
import Header from "../modules/Header";
import styled from "styled-components";
import {EventInfo} from "../model/Event";
import {darkTheme, lightTheme, Theme} from "./Themes";
import Head from "next/head";

const Main = styled.main`
  width: 100%;
  background-color: ${props => props.color};
  transition: 0.5s;
  display: flex;
  flex-direction: column;
  padding-top: 20px;
  min-height: 100vh;
`
const Body = styled.div`
  display: flex;
  width: 1000px;
  margin: 0 auto;
  background-color: ${props => props.color};
  border-radius: 20px;
  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
  transition: 0.5s;
  @media (max-width: 1000px) {
    width: 100%;
  }
`

const ThemeButton = styled.button`
  width: 20%;
  margin: 10px auto;
  height: 20%;
  background: transparent;
  border: 1px solid ${props => props.theme.white};
  color: ${props => props.theme.white};
  border-radius: 5px;
  cursor: pointer;
  transition: 0.5s;
  &:hover {
    background-color: ${props => props.theme.white};
    color: ${props => props.theme.header};
  }
`

const Footer = styled.footer`
  background-color: ${props => props.theme.header};
  color: ${props => props.theme.white};
  text-align: center;
  margin-top: 20px;
`

interface EventContext {
    favs: EventInfo[];
}

interface Selected {
    date: Date;
    sport: string;
}


export const FavouriteContext = createContext<EventContext>({favs: []});

export const ThemeContext = createContext<Theme>(lightTheme);

export const SelectedContext = createContext<Selected>({date: new Date(), sport: 'football'});


// @ts-ignore
function Layout({children}) {

    const [favourites, setFavourites] = useState<EventContext>({favs: []});

    const [theme, changeTheme] = useState<Theme>(lightTheme);

    const [selected, setSelected] = useState<Selected>({date: new Date(), sport: 'football'});

    function switchTheme() {
        if(theme === lightTheme) changeTheme(darkTheme);
        else changeTheme(lightTheme);
    }

    return (
        <>
            <Head>
                <title>MiniSofa</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/public/favicon.ico"/>
            </Head>
            <ThemeContext.Provider value={theme === lightTheme ? lightTheme : darkTheme}>
                <FavouriteContext.Provider value={favourites}>
                    <SelectedContext.Provider value={selected}>
                        <Header />
                        <Main color={theme.main}>
                            <Body color={theme.body}>
                                {children}
                            </Body>
                            <Footer theme={theme}>
                                <ThemeButton theme={theme} onClick={() => switchTheme()}>Switch theme</ThemeButton>
                                <h2>MiniSofa - Martin Blazekovic</h2>
                                <p>Sofascore Frontend Academy 2022 (C)</p>
                            </Footer>
                        </Main>
                    </SelectedContext.Provider>
                </FavouriteContext.Provider>
                </ThemeContext.Provider>
        </>
    );
}

export default Layout;